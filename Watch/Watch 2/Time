class clock {
  PVector sec;
  PVector min;
  PVector hr;
  float r;

  clock() {
    r = 190;
  }
  void centre() {
    
  }

  void seconds() {
    pushMatrix();
    translate(width/2, height/2);

    sec = new PVector(0, 0);

    float s = second();
    float angle = map(s, 0, 60, 0, 360);
    noFill();
    pushMatrix();
    stroke(12, 248, 227);
    
    rotate(radians(angle));
    pushMatrix();
    rotate(radians(-18));
    strokeWeight(5);
    //polygon(sec.x, sec.y, 260, 5);
    polygon(sec.x, sec.y, 165, 5);
    popMatrix();
    //line(0, -260, 0, -240);
    strokeWeight(5);
    line(0, 0, 0, -155);
    popMatrix();
  }

  void minutes() {
    min = new PVector(0, 0);
    noFill();
    float m = minute();
    float angle = map(m, 0, 60, 0, 360);
    pushMatrix();
    stroke(255, 69, 159);
    rotate(radians(angle));
    pushMatrix();
    rotate(radians(-18));
    strokeWeight(7);
    //polygon(min.x, min.y, 340, 5);
    polygon(sec.x, sec.y, 120, 5);
    popMatrix();
    strokeWeight(7);
    //line(0, -340, 0, -320);
    line(0, 0, 0, -108);
    popMatrix();
  }
  void hours() {
    min = new PVector(0, 0);
    noFill();
    float h = hour();
    float angle = map(h % 12, 0, 12, 0, 360);
    pushMatrix();
    stroke(197, 0, 255);
    rotate(radians(angle));
    pushMatrix();
    rotate(radians(-18));
    //polygon(min.x, min.y, 440, 5);
    strokeWeight(10);
    polygon(sec.x, sec.y, 85, 5);
    popMatrix();
    //line(0, -440, 0, -420);
    strokeWeight(10);
    line(0, 0, 0, -65);
    fill(255);
    noStroke();
    circle(0,0, 11);
    popMatrix();
    popMatrix();
  }

  void polygon(float x, float y, float radius, int npoints) {
    float angle = TWO_PI / npoints;
    beginShape();
    strokeJoin(ROUND);
    for (float a = 0; a < TWO_PI; a += angle) {
      float sx = x + cos(a) * radius;
      float sy = y + sin(a) * radius;
      vertex(sx, sy);
    }
    endShape(CLOSE);
  }

  void markingshr() {
    for ( int t = 0; t <= 12; t ++) {
      strokeWeight(4);
      stroke(197, 0, 255);
      float angle = radians(t*(360/12));
      float x1 = width/2 + r*cos(angle);
      float y1 = height/2 + r*sin(angle);
      float x2 = width/2 + (r-15)*cos(angle);
      float y2 = height/2 + (r-15)*sin(angle);
      line(x1, y1, x2, y2);
    }
  }
  void markingsmn() {
    for ( int t = 0; t <= 60; t ++) {
      strokeWeight(1.5);
      stroke(255, 69, 159);
      float angle = radians(t*(360/60));
      float x1 = width/2 + r*cos(angle);
      float y1 = height/2 + r*sin(angle);
      float x2 = width/2 + (r-10)*cos(angle);
      float y2 = height/2 + (r-10)*sin(angle);
      line(x1, y1, x2, y2);
    }
  }
}
